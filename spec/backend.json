{
  "import": {
    "common": "https://raw.githubusercontent.com/apioo/fusio-model/main/spec/common.json"
  },
  "definitions": {
    "Account_ChangePassword": {
      "type": "struct",
      "properties": {
        "oldPassword": {
          "description": "The old password",
          "type": "string"
        },
        "newPassword": {
          "description": "The new password",
          "type": "string"
        },
        "verifyPassword": {
          "description": "To verify the new password must contain the same value as the new password",
          "type": "string"
        }
      }
    },
    "Action": {
      "description": "This object represents the business logic which can be executed either through an operation or cronjob",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = active or 0 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,255}$"
        },
        "class": {
          "description": "Underlying class of this action which handles the action logic",
          "type": "string"
        },
        "async": {
          "description": "Whether to execute the action asynchronously, if true the action directly returns a 202 response and the action is executed later on in the background, useful for expensive operations",
          "type": "boolean"
        },
        "config": {
          "description": "Contains the action specific configuration",
          "type": "reference",
          "target": "Action_Config"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Action_Config": {
      "description": "The action configuration which contains arbitrary key-value entries",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Action_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Action"
      }
    },
    "Action_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Action"
      }
    },
    "Action_Index": {
      "description": "Contains all possible classes which can be used at an action as class",
      "type": "struct",
      "properties": {
        "actions": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Action_Index_Entry"
          }
        }
      }
    },
    "Action_Index_Entry": {
      "description": "Represents a concrete action class",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Human-readable name of the action class",
          "type": "string"
        },
        "class": {
          "description": "Technical identifier of the action class",
          "type": "string"
        }
      }
    },
    "Action_Collection": {
      "description": "A paginated collection of action objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Action"
        }
      }
    },
    "Action_Execute_Request_Body": {
      "description": "Represents a request body",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Action_Execute_Request": {
      "description": "Represents a request to execute an action",
      "type": "struct",
      "properties": {
        "method": {
          "description": "HTTP method i.e. GET, POST",
          "type": "string"
        },
        "uriFragments": {
          "description": "URL-encoded uri fragments i.e. foo=bar&bar=foo",
          "type": "string"
        },
        "parameters": {
          "description": "URL-encoded query parameters i.e. foo=bar&bar=foo",
          "type": "string"
        },
        "headers": {
          "description": "URL-encoded headers i.e. foo=bar&bar=foo",
          "type": "string"
        },
        "body": {
          "description": "Request body of this execution",
          "type": "reference",
          "target": "Action_Execute_Request_Body"
        }
      }
    },
    "Action_Execute_Response_Headers": {
      "description": "Represents a map of headers",
      "type": "map",
      "schema": {
        "type": "string"
      }
    },
    "Action_Execute_Response_Body": {
      "description": "Represents a response body",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Action_Execute_Response": {
      "description": "Represents an action execution response",
      "type": "struct",
      "properties": {
        "statusCode": {
          "description": "HTTP status code i.e. 200, 400, etc.",
          "type": "integer"
        },
        "headers": {
          "description": "The response header returned by the action",
          "type": "reference",
          "target": "Action_Execute_Response_Headers"
        },
        "body": {
          "description": "The response body returned by the action",
          "type": "reference",
          "target": "Action_Execute_Response_Body"
        }
      }
    },
    "App": {
      "description": "This object represents an app to access the API on-behalf of a user",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "userId": {
          "type": "integer"
        },
        "status": {
          "description": "Status of the object either 1 = active, 2 = pending, 3 = deactivated or 4 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,64}$"
        },
        "url": {
          "description": "Url where the app is hosted",
          "type": "string"
        },
        "parameters": {
          "description": "Optional URL-encoded parameters of the app i.e. foo=bar&bar=foo",
          "type": "string"
        },
        "appKey": {
          "description": "The app key also known as client id which is generated on creation",
          "type": "string",
          "readOnly": true
        },
        "appSecret": {
          "description": "The app secret also known as client secret which is generated on creation",
          "type": "string",
          "readOnly": true
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        },
        "date": {
          "description": "The create date of this object",
          "type": "string",
          "format": "date-time"
        },
        "scopes": {
          "description": "A list of assigned scopes for this app",
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "tokens": {
          "description": "A list of tokens which are assigned to this app",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Token"
          }
        }
      }
    },
    "App_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "App"
      }
    },
    "App_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "App"
      }
    },
    "App_Collection": {
      "description": "A paginated collection of app objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "App"
        }
      }
    },
    "Audit": {
      "description": "This object represents an audit which is created every time something was changed at the system",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "app": {
          "type": "reference",
          "target": "App"
        },
        "user": {
          "type": "reference",
          "target": "User"
        },
        "event": {
          "description": "Trigger event of this audit",
          "type": "string"
        },
        "ip": {
          "description": "IP which as issued the request",
          "type": "string"
        },
        "message": {
          "description": "Message of this audit event",
          "type": "string"
        },
        "content": {
          "description": "Content of this adit event",
          "type": "reference",
          "target": "Audit_Object"
        },
        "date": {
          "description": "Insert date of this audit event",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Audit_Object": {
      "description": "A key value object containing the changes",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Audit_Collection": {
      "description": "A paginated collection of audit objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Audit"
        }
      }
    },
    "Backup_Export": {
      "description": "Export of the complete system configuration",
      "type": "struct",
      "properties": {
        "export": {
          "type": "string"
        }
      }
    },
    "Backup_Import": {
      "description": "Import a previously exported system configuration",
      "type": "struct",
      "properties": {
        "import": {
          "type": "string"
        }
      }
    },
    "Backup_Import_Result": {
      "description": "Result of a backup import operation",
      "type": "struct",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "logs": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "Category": {
      "description": "This object represents a category. Every user is assigned to a category and can only view objects which are also assigned to the same category, through this it is possible to build separate areas for external developers",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,255}$"
        }
      }
    },
    "Category_Collection": {
      "description": "A paginated collection of category objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Category"
        }
      }
    },
    "Category_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Category"
      }
    },
    "Category_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Category"
      }
    },
    "Config": {
      "description": "This object represents a system configuration",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "type": {
          "description": "The config value type",
          "type": "integer"
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string"
        },
        "description": {
          "description": "A short description fo this configuration value",
          "type": "string"
        },
        "value": {
          "description": "The actual config value",
          "type": "any"
        }
      }
    },
    "Config_Collection": {
      "description": "A paginated collection of config objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Config"
        }
      }
    },
    "Config_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Config"
      }
    },
    "Connection": {
      "description": "This object represents a connection to an external system like i.e. a database, message-queue or client-sdk",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,255}$"
        },
        "class": {
          "description": "Underlying class of this connection which returns a configured client connection i.e. database, message-queue or client-sdk",
          "type": "string"
        },
        "oauth2": {
          "description": "Indicates whether it is possible to start an OAuth2 authorization code flow on this connection",
          "type": "boolean"
        },
        "config": {
          "description": "Contains the connection specific configuration",
          "type": "reference",
          "target": "Connection_Config"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Connection_Config": {
      "description": "The connection configuration which contains arbitrary key-value entries",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Connection_Collection": {
      "description": "A paginated collection of connection objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Connection"
        }
      }
    },
    "Connection_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Connection"
      }
    },
    "Connection_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Connection"
      }
    },
    "Connection_Index": {
      "description": "Contains all possible classes which can be used at an connection as class",
      "type": "struct",
      "properties": {
        "connections": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Connection_Index_Entry"
          }
        }
      }
    },
    "Connection_Index_Entry": {
      "description": "Represents a concrete connection class",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Human-readable name of the connection class",
          "type": "string"
        },
        "class": {
          "description": "Technical identifier of the connection class",
          "type": "string"
        }
      }
    },
    "Connection_Redirect_Response": {
      "description": "Redirect response to initiate an OAuth2 flow",
      "type": "struct",
      "properties": {
        "redirectUri": {
          "type": "string"
        }
      }
    },
    "Connection_Introspection_Entities": {
      "deprecated": true,
      "type": "struct",
      "properties": {
        "entities": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "Connection_Introspection_Entity": {
      "deprecated": true,
      "type": "struct",
      "properties": {
        "name": {
          "type": "string"
        },
        "headers": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "rows": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Connection_Introspection_Entity_Row"
          }
        }
      }
    },
    "Connection_Introspection_Entity_Row": {
      "deprecated": true,
      "type": "struct",
      "properties": {
        "values": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "Cronjob": {
      "description": "This object represents a cronjob which can invoke an action at a specific interval",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,255}$"
        },
        "cron": {
          "description": "The cron expression i.e. */5 * * * * for every 5 minutes",
          "type": "string"
        },
        "action": {
          "description": "The target action which gets invoked",
          "type": "string"
        },
        "executeDate": {
          "description": "The last execution date",
          "type": "string",
          "format": "date-time"
        },
        "exitCode": {
          "description": "The last exit code",
          "type": "integer"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        },
        "errors": {
          "description": "Contains an array of errors in case the cronjob has failed",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Cronjob_Error"
          }
        }
      }
    },
    "Cronjob_Error": {
      "description": "Represents an error which occurred on cronjob execution",
      "type": "struct",
      "properties": {
        "message": {
          "type": "string"
        },
        "trace": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "line": {
          "type": "integer"
        }
      }
    },
    "Cronjob_Collection": {
      "description": "A paginated collection of cronjob objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Cronjob"
        }
      }
    },
    "Cronjob_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Cronjob"
      }
    },
    "Cronjob_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Cronjob"
      }
    },
    "Database_Table": {
      "description": "This object represents a relational table on a database connection",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Name of the table",
          "type": "string"
        },
        "columns": {
          "description": "Available columns on the table",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Database_Table_Column"
          }
        },
        "primaryKey": {
          "description": "The primary key column",
          "type": "string"
        },
        "indexes": {
          "description": "Available indices on the table",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Database_Table_Index"
          }
        },
        "foreignKeys": {
          "description": "Available foreign key constraints",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Database_Table_ForeignKeyConstraint"
          }
        }
      }
    },
    "Database_Table_Column": {
      "description": "This object represents a column at a relation table",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Name of the column",
          "type": "string"
        },
        "type": {
          "description": "The column type i.e. integer or string",
          "type": "string"
        },
        "length": {
          "description": "Optional the max length of the column",
          "type": "integer"
        },
        "precision": {
          "description": "Optional the precision of the column",
          "type": "integer"
        },
        "scale": {
          "description": "Optional the scale of the column",
          "type": "integer"
        },
        "unsigned": {
          "description": "Indicates whether the column is unsigned, relevant for integer types",
          "type": "boolean"
        },
        "fixed": {
          "description": "Indicates whether the column has a fixed length",
          "type": "boolean"
        },
        "notNull": {
          "description": "Indicates whether the column allows null",
          "type": "boolean"
        },
        "autoIncrement": {
          "description": "Indicates whether this column is an auto increment column",
          "type": "boolean"
        },
        "default": {
          "description": "Optional defines the default value",
          "type": "any"
        },
        "comment": {
          "description": "Optional a comment for this column",
          "type": "string"
        }
      }
    },
    "Database_Table_Index": {
      "description": "This object represents a table index on a relational database",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Name of the index",
          "type": "string"
        },
        "unique": {
          "description": "Indicates whether the index is unique",
          "type": "boolean"
        },
        "columns": {
          "description": "Columns assigned ot the index",
          "type": "array",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "Database_Table_ForeignKeyConstraint": {
      "description": "This object represents a foreign key constraint on a relational database",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Name of the foreign key constraint",
          "type": "string"
        },
        "foreignTable": {
          "description": "Name of the foreign table",
          "type": "string"
        },
        "localColumnNames": {
          "description": "Local column names",
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "foreignColumnNames": {
          "description": "Foreign column names",
          "type": "array",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "Database_Table_Collection": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Database_Table"
        }
      }
    },
    "Database_Row": {
      "description": "This object represents a row on a relational table",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Database_Row_Collection": {
      "description": "A paginated collection of database rows",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Database_Row"
        }
      }
    },
    "Dashboard": {
      "description": "Represents an object containing all widget data for the dashboard",
      "type": "struct",
      "properties": {
        "errorsPerOperation": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "incomingRequests": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "incomingTransactions": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "mostUsedOperations": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "timePerOperation": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "testCoverage": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "mostUsedActivities": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "activitiesPerUser": {
          "type": "reference",
          "target": "Statistic_Chart"
        },
        "userRegistrations": {
          "type": "reference",
          "target": "Statistic_Chart"
        }
      }
    },
    "Event": {
      "description": "This object represents an event which can be triggered by an action",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_\\.]{3,64}$"
        },
        "description": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Event_Collection": {
      "description": "A paginated collection of event objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Event"
        }
      }
    },
    "Event_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Event"
      }
    },
    "Event_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Event"
      }
    },
    "File": {
      "description": "This object represents a file on the filesystem",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "string",
          "readOnly": true
        },
        "name": {
          "description": "Name of the file",
          "type": "string"
        },
        "contentType": {
          "description": "MIME type of the file",
          "type": "string"
        },
        "checksum": {
          "description": "Checksum of the file",
          "type": "string"
        },
        "lastModified": {
          "description": "Last modified date of the file",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "File_Collection": {
      "description": "A paginated collection of file objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "File"
        }
      }
    },
    "Firewall": {
      "description": "This object represents a firewall rule which blocks specific IP addresses",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_\\.]{3,64}$"
        },
        "type": {
          "description": "The type of the rule either 1 = allow or 0 = deny",
          "type": "integer"
        },
        "ip": {
          "description": "The target IP address",
          "type": "string"
        },
        "expire": {
          "description": "The expire date",
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Firewall_Collection": {
      "description": "A paginated collection of firewall objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Firewall"
        }
      }
    },
    "Firewall_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Firewall"
      }
    },
    "Firewall_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Firewall"
      }
    },
    "Form": {
      "description": "This object represents a form which helps to dynamically generate a form at a frontend app",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = active or 0 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_\\.]{3,64}$"
        },
        "operationId": {
          "description": "Target operation which gets invoked through this form",
          "type": "integer"
        },
        "uiSchema": {
          "description": "Optional an UI schema to dynamically describe this form",
          "type": "any"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Form_Collection": {
      "description": "A paginated collection of form objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Form"
        }
      }
    },
    "Form_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Form"
      }
    },
    "Form_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Form"
      }
    },
    "Identity": {
      "description": "This object represents an identity which allows to authenticate with a remote identity provider",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "appId": {
          "description": "The target app for this identity",
          "type": "integer"
        },
        "roleId": {
          "description": "Role which is assigned to new users",
          "type": "integer"
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,255}$"
        },
        "icon": {
          "description": "An icon for this identity provider",
          "type": "string"
        },
        "class": {
          "description": "Underlying class of this identity provider",
          "type": "string"
        },
        "config": {
          "type": "reference",
          "target": "Identity_Config"
        },
        "allowCreate": {
          "type": "boolean"
        }
      }
    },
    "Identity_Config": {
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Identity_Collection": {
      "description": "A paginated collection of identity objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Identity"
        }
      }
    },
    "Identity_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Identity"
      }
    },
    "Identity_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Identity"
      }
    },
    "Identity_Index": {
      "description": "Contains all possible classes which can be used at an identity as class",
      "type": "struct",
      "properties": {
        "providers": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Identity_Index_Entry"
          }
        }
      }
    },
    "Identity_Index_Entry": {
      "description": "Represents a concrete identity class",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Human-readable name of the identity class",
          "type": "string"
        },
        "class": {
          "description": "Technical identifier of the identity class",
          "type": "string"
        }
      }
    },
    "Generator_Index_Providers": {
      "description": "Contains all possible classes which can be used at an generator as class",
      "type": "struct",
      "properties": {
        "providers": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Generator_Index_Provider"
          }
        }
      }
    },
    "Generator_Index_Provider": {
      "description": "Represents a concrete generator class",
      "type": "struct",
      "properties": {
        "name": {
          "description": "Human-readable name of the generator class",
          "type": "string"
        },
        "class": {
          "description": "Technical identifier of the generator class",
          "type": "string"
        }
      }
    },
    "Generator_Provider": {
      "type": "struct",
      "properties": {
        "path": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "public": {
          "type": "boolean"
        },
        "config": {
          "type": "reference",
          "target": "Generator_Provider_Config"
        }
      }
    },
    "Generator_Provider_Config": {
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Generator_Provider_Changelog": {
      "type": "struct",
      "properties": {
        "schemas": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Schema"
          }
        },
        "actions": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Action"
          }
        },
        "operations": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Operation"
          }
        }
      }
    },
    "Log": {
      "description": "This object represents a log entry. Every HTTP requests to the system generates such a log entry.",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "ip": {
          "description": "The remote IP which has initiated the request",
          "type": "string"
        },
        "userAgent": {
          "description": "The user agent provided by the HTTP user agent header",
          "type": "string"
        },
        "method": {
          "description": "The HTTP method i.e. GET or POST",
          "type": "string"
        },
        "path": {
          "description": "The target path",
          "type": "string"
        },
        "header": {
          "description": "The provided HTTP headers",
          "type": "string"
        },
        "body": {
          "description": "The provided HTTP body",
          "type": "string"
        },
        "date": {
          "description": "Insert date of this request",
          "type": "string",
          "format": "date-time"
        },
        "errors": {
          "description": "An array of errors which occurred through this request",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Log_Error"
          }
        }
      }
    },
    "Log_Collection": {
      "description": "A paginated collection of log objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Log"
        }
      }
    },
    "Log_Error": {
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "logId": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "trace": {
          "type": "string"
        },
        "file": {
          "type": "string"
        },
        "line": {
          "type": "integer"
        },
        "insertDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Log_Error_Collection": {
      "description": "A paginated collection of log error objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Log_Error"
        }
      }
    },
    "Operation": {
      "description": "This object represents an operation, an operation invokes an action in case a specific HTTP method and path was requested. It defines also schema information about the request and response payload",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = active or 0 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "active": {
          "description": "Indicates whether the operation is active",
          "type": "boolean"
        },
        "public": {
          "description": "Indicates whether the operation is public, if false a user must provide an Authorization header with an Bearer access token",
          "type": "boolean"
        },
        "stability": {
          "description": "Describes the stability of this operation 0 = deprecated, 1 = experimental, 2 = stable and 3 = legacy",
          "type": "integer"
        },
        "description": {
          "description": "A short description of this operation, it should explain the operation in a simple and precise way",
          "type": "string"
        },
        "httpMethod": {
          "description": "The target HTTP method i.e. GET or POST",
          "type": "string"
        },
        "httpPath": {
          "description": "The target HTTP path i.e. /foo or /product/:product_id",
          "type": "string"
        },
        "httpCode": {
          "description": "The success HTTP code i.e. 200 or 201",
          "type": "integer"
        },
        "name": {
          "description": "Unique name of the object. It is recommended to group your operations into logical units by using a dot i.e. product.getAll and product.insert which has also an effect on the automatically generated SDK",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\_\\.]{3,64}$"
        },
        "parameters": {
          "description": "Describes available query parameters",
          "type": "reference",
          "target": "Operation_Parameters"
        },
        "incoming": {
          "description": "Describes the incoming request payload, this must contain a schema name",
          "type": "string"
        },
        "outgoing": {
          "description": "Describes the outgoing response payload, this must contain a schema name",
          "type": "string"
        },
        "throws": {
          "description": "Describes error responses for i.e. client or server errors",
          "type": "reference",
          "target": "Operation_Throws"
        },
        "action": {
          "description": "The target action to invoke, this must contain an action name",
          "type": "string"
        },
        "costs": {
          "description": "Costs to invoke this operation. A user can only invoke this operation in case he has enough points",
          "type": "integer"
        },
        "scopes": {
          "description": "Scopes which are required to invoke this operation",
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Operation_Parameters": {
      "type": "map",
      "schema": {
        "type": "reference",
        "target": "Operation_Schema"
      }
    },
    "Operation_Throws": {
      "type": "map",
      "schema": {
        "type": "string"
      }
    },
    "Operation_Schema": {
      "type": "struct",
      "properties": {
        "description": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "enum": {
          "type": "string"
        }
      }
    },
    "Operation_Collection": {
      "description": "A paginated collection of operation objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Operation"
        }
      }
    },
    "Operation_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Operation"
      }
    },
    "Operation_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Operation"
      }
    },
    "Page": {
      "description": "This object represents a page at the developer portal",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = visible, 2 = invisible or 0 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "title": {
          "description": "Title of the page",
          "type": "string"
        },
        "slug": {
          "description": "Slug of the page which gets dynamically generated from the title",
          "type": "string",
          "readOnly": true
        },
        "content": {
          "description": "HTML content of this page",
          "type": "string"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Page_Collection": {
      "description": "A paginated collection of page objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Page"
        }
      }
    },
    "Page_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Page"
      }
    },
    "Page_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Page"
      }
    },
    "Plan": {
      "description": "This object represents a plan, a plan allows users to obtain points or in general subscribe to your app",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Name of the plan",
          "type": "string"
        },
        "description": {
          "description": "Short description of the plan",
          "type": "string"
        },
        "price": {
          "description": "The price of this plan",
          "type": "number"
        },
        "points": {
          "description": "The points which are assigned to the user on purchase",
          "type": "integer"
        },
        "period": {
          "description": "Whether the plan is one-time or periodically",
          "type": "integer"
        },
        "externalId": {
          "description": "An external id of a remote payment provider like Stripe",
          "type": "string"
        },
        "scopes": {
          "description": "Scopes which are assigned dynamically to the user on purchase",
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Plan_Collection": {
      "description": "A paginated collection of plan objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Plan"
        }
      }
    },
    "Plan_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Plan"
      }
    },
    "Plan_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Plan"
      }
    },
    "Rate": {
      "description": "This object represents a rate limitation, which allows to limit the requests which a user can send",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "priority": {
          "description": "All rates are applied based on the priority, higher priorities are applied first",
          "type": "integer"
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,64}$"
        },
        "rateLimit": {
          "description": "Maximum number of allowed requests",
          "type": "integer"
        },
        "timespan": {
          "description": "Timespan for the allowed requests",
          "type": "string"
        },
        "allocation": {
          "description": "Through a rate allocation a user gets assigned to a specific rate",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Rate_Allocation"
          }
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Rate_Collection": {
      "description": "A paginated collection of rate objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Rate"
        }
      }
    },
    "Rate_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Rate"
      }
    },
    "Rate_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Rate"
      }
    },
    "Rate_Allocation": {
      "description": "This object represents a rate allocation, in case a request matches it gets assigned to the attached rate",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "operationId": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "planId": {
          "type": "integer"
        },
        "appId": {
          "type": "integer"
        },
        "authenticated": {
          "description": "Whether the request is authenticated",
          "type": "boolean"
        }
      }
    },
    "Role": {
      "description": "This object represents a role, every user is assigned to a role and all scopes of the role are automatically attached to the user",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "categoryId": {
          "description": "The assigned category id of this role",
          "type": "integer"
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,64}$"
        },
        "scopes": {
          "description": "All scopes which are assigned to this role",
          "type": "array",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "Role_Collection": {
      "description": "A paginated collection of role objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Role"
        }
      }
    },
    "Role_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Role"
      }
    },
    "Role_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Role"
      }
    },
    "Schema": {
      "description": "This object represents a schema to describe a JSON payload",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = active or 0 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_]{3,255}$"
        },
        "source": {
          "description": "The TypeSchema specification to describe a JSON payload",
          "type": "reference",
          "target": "Schema_Source"
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Schema_Source": {
      "description": "Contains the TypeSchema specification",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Schema_Form": {
      "description": "Contains a UI vocabulary to describe the UI of the schema",
      "type": "map",
      "schema": {
        "type": "any"
      }
    },
    "Schema_Collection": {
      "description": "A paginated collection of schema objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Schema"
        }
      }
    },
    "Schema_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Schema"
      }
    },
    "Schema_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Schema"
      }
    },
    "Schema_Preview_Response": {
      "type": "struct",
      "properties": {
        "preview": {
          "type": "string"
        }
      }
    },
    "Scope": {
      "description": "This object represents a scope. A scope is assigned to a user and is required to access operations",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_\\.]{3,64}$"
        },
        "description": {
          "description": "Short description of the scope",
          "type": "string"
        },
        "operations": {
          "description": "All operations which can be access through this scope",
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Scope_Operation"
          }
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        }
      }
    },
    "Scope_Operation": {
      "type": "struct",
      "properties": {
        "operationId": {
          "type": "integer"
        },
        "allow": {
          "type": "boolean"
        }
      }
    },
    "Scope_Collection": {
      "description": "A paginated collection of scope objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Scope"
        }
      }
    },
    "Scope_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Scope"
      }
    },
    "Scope_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Scope"
      }
    },
    "Scope_Categories": {
      "type": "struct",
      "properties": {
        "categories": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Scope_Category"
          }
        }
      }
    },
    "Scope_Category": {
      "type": "struct",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Scope_Category_Scope"
          }
        }
      }
    },
    "Scope_Category_Scope": {
      "type": "struct",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "Statistic_Chart": {
      "type": "struct",
      "properties": {
        "labels": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "series": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Statistic_Chart_Series"
          }
        }
      }
    },
    "Statistic_Chart_Series": {
      "type": "struct",
      "properties": {
        "name": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "schema": {
            "type": "number"
          }
        }
      }
    },
    "Statistic_Count": {
      "type": "struct",
      "properties": {
        "count": {
          "type": "integer"
        },
        "from": {
          "type": "string",
          "format": "date-time"
        },
        "to": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Sdk_Response": {
      "type": "struct",
      "properties": {
        "types": {
          "type": "reference",
          "target": "Sdk_Types"
        }
      }
    },
    "Sdk_Types": {
      "description": "Represents available SDK type which can be generated",
      "type": "map",
      "schema": {
        "type": "string"
      }
    },
    "Sdk_Generate": {
      "type": "struct",
      "properties": {
        "format": {
          "type": "string"
        },
        "config": {
          "type": "string"
        }
      }
    },
    "Sdk_Message": {
      "type": "struct",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "link": {
          "type": "string"
        }
      }
    },
    "Test": {
      "description": "This object represents a test. A test helps to verify that all operations work as expected",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = pending, 2 = success, 3 = warning, 4 = error, 5 = skipped or 6 = disabled",
          "type": "integer",
          "readOnly": true
        },
        "operationName": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "response": {
          "type": "string"
        },
        "config": {
          "type": "reference",
          "target": "Test_Config"
        }
      }
    },
    "Test_Config": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Action_Execute_Request"
      }
    },
    "Test_Collection": {
      "description": "A paginated collection of test objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Test"
        }
      }
    },
    "Transaction": {
      "description": "This object represents a transaction. A transaction is generated by the system in case the payment provide provides a message that the payment was successfully executed",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "userId": {
          "type": "integer"
        },
        "planId": {
          "type": "integer"
        },
        "transactionId": {
          "type": "string"
        },
        "amount": {
          "type": "number"
        },
        "points": {
          "type": "number"
        },
        "periodStart": {
          "type": "string",
          "format": "date-time"
        },
        "periodEnd": {
          "type": "string",
          "format": "date-time"
        },
        "insertDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Transaction_Collection": {
      "description": "A paginated collection of transaction objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Transaction"
        }
      }
    },
    "Trash_Types": {
      "type": "struct",
      "properties": {
        "types": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        }
      }
    },
    "Trash_Data": {
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = active or 0 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Trash_Data_Collection": {
      "description": "A paginated collection of deleted objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Trash_Data"
        }
      }
    },
    "Trash_Restore": {
      "type": "struct",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "Token": {
      "description": "This object represents a token, this an access token which was requested by a user",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "status": {
          "description": "Status of the object either 1 = active or 2 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "scopes": {
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "ip": {
          "type": "string"
        },
        "expire": {
          "type": "string",
          "format": "date-time"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Token_Collection": {
      "description": "A paginated collection of token objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Token"
        }
      }
    },
    "User": {
      "description": "This object represents a user",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "roleId": {
          "description": "A role which is assigned to the user",
          "type": "integer"
        },
        "planId": {
          "description": "A plan which is assigned to the user",
          "type": "integer"
        },
        "status": {
          "description": "Status of the object either 1 = active, 2 = disabled or 0 = deleted",
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "description": "Unique name of the object",
          "type": "string",
          "pattern": "^[a-zA-Z0-9\\-\\_\\.]{3,255}$"
        },
        "email": {
          "description": "The email address of the user",
          "type": "string"
        },
        "points": {
          "description": "Points assigned to the user",
          "type": "integer"
        },
        "scopes": {
          "description": "List of scopes which are assigned to the user",
          "type": "array",
          "schema": {
            "type": "string"
          }
        },
        "apps": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "App"
          }
        },
        "metadata": {
          "description": "Use this parameter to attach key-value data",
          "type": "reference",
          "target": "common:Metadata"
        },
        "date": {
          "description": "The insert date",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "User_Attributes": {
      "type": "map",
      "schema": {
        "type": "string"
      }
    },
    "User_Collection": {
      "description": "A paginated collection of user objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "User"
        }
      }
    },
    "User_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "User"
      },
      "properties": {
        "password": {
          "type": "string"
        }
      }
    },
    "User_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "User"
      }
    },
    "Webhook": {
      "description": "This object represents a webhook, a webhook is called in case a specific event was triggered",
      "type": "struct",
      "properties": {
        "id": {
          "description": "Unique identifier for the object",
          "type": "integer",
          "readOnly": true
        },
        "eventId": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        },
        "responses": {
          "type": "array",
          "schema": {
            "type": "reference",
            "target": "Webhook_Response"
          }
        }
      }
    },
    "Webhook_Response": {
      "type": "struct",
      "properties": {
        "id": {
          "type": "integer"
        },
        "status": {
          "type": "integer"
        },
        "code": {
          "type": "integer"
        },
        "attempts": {
          "type": "integer"
        },
        "error": {
          "type": "string"
        },
        "executeDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Webhook_Collection": {
      "description": "A paginated collection of webhook objects",
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "common:Collection",
        "template": {
          "T": "Webhook"
        }
      }
    },
    "Webhook_Create": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Webhook"
      }
    },
    "Webhook_Update": {
      "type": "struct",
      "parent": {
        "type": "reference",
        "target": "Webhook"
      }
    }
  }
}